name: Check tool updates

on:
  push:
    branches:
      - main
  workflow_dispatch:
  # Schedule the workflow to run every Monday at 00:00 UTC
  schedule:
    - cron: '0 0 * * MON'

jobs:
  check-updates:
    runs-on: ubuntu-24.04

    steps:
      # Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up git identity to commit changes
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Check and update tool versions
      - name: Update Terraform Tools Versions
        id: update_versions
        run: |
          # Fetch the current versions from Dockerfile
          CURRENT_TERRAFORM_VERSION=$(grep '^ARG TERRAFORM_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_TERRAGRUNT_VERSION=$(grep '^ARG TERRAGRUNT_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_CHECKOV_VERSION=$(grep '^ARG CHECKOV_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_TFDOCS_VERSION=$(grep '^ARG TFDOCS_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_TFLINT_VERSION=$(grep '^ARG TFLINT_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_TFSEC_VERSION=$(grep '^ARG TFSEC_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_TRIVY_VERSION=$(grep '^ARG TRIVY_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_EKSCTL_VERSION=$(grep '^ARG EKSCTL_VERSION=' Dockerfile | cut -d '=' -f2)
          CURRENT_PRE_COMMIT_VERSION=$(grep '^ARG PRE_COMMIT_VERSION=' Dockerfile | cut -d '=' -f2)

          # Fetch the latest versions using curl and jq, with error handling
          LATEST_TERRAFORM_VERSION=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_CHECKOV_VERSION=$(curl -s https://api.github.com/repos/bridgecrewio/checkov/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_TFDOCS_VERSION=$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_TFLINT_VERSION=$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_TFSEC_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_EKSCTL_VERSION=$(curl -s https://api.github.com/repos/eksctl-io/eksctl/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")
          LATEST_PRE_COMMIT_VERSION=$(curl -s https://api.github.com/repos/pre-commit/pre-commit/releases/latest | jq -r .tag_name | sed 's/^v//' || echo "error")

          # Initialize PR body and check if each tool has a version change
          PR_BODY="Updated tool versions:<br>"

          if [ "$LATEST_TERRAFORM_VERSION" != "error" ] && [ "$CURRENT_TERRAFORM_VERSION" != "$LATEST_TERRAFORM_VERSION" ]; then
            sed -i "s/^ARG TERRAFORM_VERSION=.*/ARG TERRAFORM_VERSION=${LATEST_TERRAFORM_VERSION}/" Dockerfile
            PR_BODY+="- **Terraform**: [See Changelog of $LATEST_TERRAFORM_VERSION](https://github.com/hashicorp/terraform/releases/tag/v$LATEST_TERRAFORM_VERSION)<br>"
          fi

          if [ "$LATEST_TERRAGRUNT_VERSION" != "error" ] && [ "$CURRENT_TERRAGRUNT_VERSION" != "$LATEST_TERRAGRUNT_VERSION" ]; then
            sed -i "s/^ARG TERRAGRUNT_VERSION=.*/ARG TERRAGRUNT_VERSION=${LATEST_TERRAGRUNT_VERSION}/" Dockerfile
            PR_BODY+="- **Terragrunt**: [See Changelog of $LATEST_TERRAGRUNT_VERSION](https://github.com/gruntwork-io/terragrunt/releases/tag/v$LATEST_TERRAGRUNT_VERSION)<br>"
          fi

          if [ "$LATEST_CHECKOV_VERSION" != "error" ] && [ "$CURRENT_CHECKOV_VERSION" != "$LATEST_CHECKOV_VERSION" ]; then
            sed -i "s/^ARG CHECKOV_VERSION=.*/ARG CHECKOV_VERSION=${LATEST_CHECKOV_VERSION}/" Dockerfile
            PR_BODY+="- **Checkov**: [See Changelog of $LATEST_CHECKOV_VERSION](https://github.com/bridgecrewio/checkov/releases/tag/$LATEST_CHECKOV_VERSION)<br>"
          fi

          if [ "$LATEST_TFDOCS_VERSION" != "error" ] && [ "$CURRENT_TFDOCS_VERSION" != "$LATEST_TFDOCS_VERSION" ]; then
            sed -i "s/^ARG TFDOCS_VERSION=.*/ARG TFDOCS_VERSION=${LATEST_TFDOCS_VERSION}/" Dockerfile
            PR_BODY+="- **Terraform Docs**: [See Changelog of $LATEST_TFDOCS_VERSION](https://github.com/terraform-docs/terraform-docs/releases/tag/v$LATEST_TFDOCS_VERSION)<br>"
          fi

          if [ "$LATEST_TFLINT_VERSION" != "error" ] && [ "$CURRENT_TFLINT_VERSION" != "$LATEST_TFLINT_VERSION" ]; then
            sed -i "s/^ARG TFLINT_VERSION=.*/ARG TFLINT_VERSION=${LATEST_TFLINT_VERSION}/" Dockerfile
            PR_BODY+="- **TFLint**: [See Changelog of $LATEST_TFLINT_VERSION](https://github.com/terraform-linters/tflint/releases/tag/v$LATEST_TFLINT_VERSION)<br>"
          fi

          if [ "$LATEST_TFSEC_VERSION" != "error" ] && [ "$CURRENT_TFSEC_VERSION" != "$LATEST_TFSEC_VERSION" ]; then
            sed -i "s/^ARG TFSEC_VERSION=.*/ARG TFSEC_VERSION=${LATEST_TFSEC_VERSION}/" Dockerfile
            PR_BODY+="- **TFSec**: [See Changelog of $LATEST_TFSEC_VERSION](https://github.com/aquasecurity/tfsec/releases/tag/v$LATEST_TFSEC_VERSION)<br>"
          fi

          if [ "$LATEST_TRIVY_VERSION" != "error" ] && [ "$CURRENT_TRIVY_VERSION" != "$LATEST_TRIVY_VERSION" ]; then
            sed -i "s/^ARG TRIVY_VERSION=.*/ARG TRIVY_VERSION=${LATEST_TRIVY_VERSION}/" Dockerfile
            PR_BODY+="- **Trivy**: [See Changelog of $LATEST_TRIVY_VERSION](https://github.com/aquasecurity/trivy/releases/tag/v$LATEST_TRIVY_VERSION)<br>"
          fi

          if [ "$LATEST_EKSCTL_VERSION" != "error" ] && [ "$CURRENT_EKSCTL_VERSION" != "$LATEST_EKSCTL_VERSION" ]; then
            sed -i "s/^ARG EKSCTL_VERSION=.*/ARG EKSCTL_VERSION=${LATEST_EKSCTL_VERSION}/" Dockerfile
            PR_BODY+="- **eksctl**: [See Changelog of $LATEST_EKSCTL_VERSION](https://github.com/eksctl-io/eksctl/releases/tag/v$LATEST_EKSCTL_VERSION)<br>"
          fi

          if [ "$LATEST_PRE_COMMIT_VERSION" != "error" ] && [ "$CURRENT_PRE_COMMIT_VERSION" != "$LATEST_PRE_COMMIT_VERSION" ]; then
            sed -i "s/^ARG PRE_COMMIT_VERSION=.*/ARG PRE_COMMIT_VERSION=${LATEST_PRE_COMMIT_VERSION}/" Dockerfile
            PR_BODY+="- **Pre-commit**: [See Changelog of $LATEST_PRE_COMMIT_VERSION](https://github.com/pre-commit/pre-commit/releases/tag/v$LATEST_PRE_COMMIT_VERSION)<br>"
          fi

          # Properly export the multi-line PR body using <<EOF syntax
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$PR_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check for changes
        id: check_changes
        run: |
          git diff --exit-code || echo "Changes detected"
          echo "changes=$(if git diff --quiet; then echo 'false'; else echo 'true'; fi)" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: cpr
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: 'feat: Update tool versions'
          title: 'feat: Update tool versions'
          branch: update-tool-versions
          body: ${{ env.PR_BODY }}

      # - name: Auto approve
      #   if: steps.cpr.outputs.pull-request-operation == 'created'
      #   run: gh pr review --approve "${{ steps.cpr.outputs.pull-request-number }}"
        # env:
        #   GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull Request Automerge
        run: gh pr merge --merge --auto "1"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
